version: "3.9" # optional since v1.27.0

x-common-variables: &common-variables
  JWT_SECRET: 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7
  # - TOKEN_URL=http://138.68.161.150:8000/token
  TOKEN_URL: http://localhost:8000/token
  MONGO_DATABASE_URL: mongodb://admin:asdbiuievbsvkb@mongo:27017/
  ENV: DEV
  CELERY_BROKER_URL: redis://redis:6379
  CELERY_RESULT_BACKEND: redis://redis:6379
  REDIS_URL: redis://redis
  PYTHONUNBUFFERED: 1


services:

  fake-data-gen:
    profiles: ["backendfull", "stream"]
    build:
      context: .
      dockerfile: backend/dev_services/create_fake_data/dev.Dockerfile
    volumes:
      - ./backend/dev_services/create_fake_data/main.py:/main.py
      - ./backend/schemas:/schemas
      - ./backend/libs:/libs
      - ./model_saving:/model_saving
    environment:
      <<: *common-variables
    networks:
      - vpcbr
    depends_on:
      - account-service

  account-service:
    profiles: ["backendfull", "stream"]
    build:
      context: .
      dockerfile: backend/client_services/account_service/dev.Dockerfile
    volumes:
      - ./backend/client_services/account_service/app:/app
      - ./backend/schemas:/schemas
      - ./backend/libs:/libs
      - ./backend/configs:/configs
    ports:
      - "8000:8080"
    environment:
      <<: *common-variables
    networks:
      - vpcbr
    depends_on:
      - mongo

  data-stream-service:
    profiles : ["backendfull", "stream", "ingest"]
    build:
      context: .
      dockerfile: backend/client_services/data_stream_service/dev.Dockerfile
    volumes:
      - ./backend/client_services/data_stream_service/app:/app
      - ./backend/client_services/data_stream_service/entrypoint.sh:/entrypoint.sh
      - ./backend/schemas:/schemas
      - ./backend/libs:/libs
      - ./backend/configs:/configs
      - ./backend/client_services/data_stream_service/test.txt:/test.txt
    ports:
      - "8005:8080"
      - "8888:8888/udp"
    environment:
      <<: *common-variables
    networks:
      - vpcbr

  live-inference-service:
    profiles : ["backendfull", "stream"]
    build:
      context: .
      dockerfile: backend/client_services/live_inference_service/dev.Dockerfile
    volumes:
      - ./backend/client_services/live_inference_service/app:/app
      - ./backend/schemas:/schemas
      - ./backend/libs:/libs
      - ./backend/configs:/configs
      - ./backend/client_services/live_inference_service/test.txt:/test.txt
    ports:
      - "8006:8080"
    environment:
      <<: *common-variables
    networks:
      - vpcbr

  recording-upload-service:
    profiles: ["backendfull", "stream"]
    build:
      context: .
      dockerfile: backend/client_services/recording_upload_service/dev.Dockerfile
    volumes:
      - ./backend/client_services/recording_upload_service/app:/app
      - ./backend/client_services/recording_upload_service/entrypoint.sh:/entrypoint.sh
      - ./backend/schemas:/schemas
      - ./backend/libs:/libs
      - ./backend/configs:/configs
    ports:
      - "8001:8080"
    environment:
      <<: *common-variables
    networks:
      - vpcbr
  # TODO worker


  model-service:
    profiles: ["backendfull", "stream"]
    build:
      context: .
      dockerfile: backend/client_services/model_service/dev.Dockerfile
    volumes:
      - ./backend/client_services/model_service/app:/app
      - ./backend/client_services/model_service/entrypoint.sh:/entrypoint.sh
      - ./backend/schemas:/schemas
      - ./backend/libs:/libs
      - ./backend/configs:/configs
    ports:
      - "8002:8080"
    environment:
      <<: *common-variables
    networks:
      - vpcbr

  training-service:
    profiles: ["backendfull", "stream"]
    build:
      context: .
      dockerfile: backend/client_services/training_service/dev.Dockerfile
    volumes:
      - ./backend/client_services/training_service/src:/src
      - ./backend/client_services/training_service/entrypoint.sh:/entrypoint.sh
      - ./backend/schemas:/schemas
      - ./backend/libs:/libs
      - ./backend/configs:/configs
    ports:
      - "8003:8080"
    environment:
      <<: *common-variables
    networks:
      - vpcbr


  mongo:
    profiles: ["backendfull", "stream"]
    command: mongod --quiet --logpath /dev/null
    image: mongo:latest
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=asdbiuievbsvkb
    ports:
      - "27017:27017"
    networks:
     - vpcbr

  redis:
    profiles: ["backendfull", "stream", "ingest"]
    image: redis:latest
    networks:
     - vpcbr
    ports:
      - "6379:6379"

  minio:
    profiles: ["backendfull", "stream"]
    image: 'minio/minio:latest'
    volumes:
      - ./volumes/minio_data:/data
    ports:
      - '9000:9000'
      - '9090:9090'
    environment:
      MINIO_ROOT_USER: 'root'
      MINIO_ROOT_PASSWORD: 'password'
      MINIO_ACCESS_KEY: 'root'
      MINIO_SECRET_KEY: 'password'
    command: minio server /data/minio --console-address ":9090"
    networks:
      vpcbr:
        ipv4_address: 10.5.10.6


networks:
  vpcbr:
    driver: bridge
    ipam:
     config:
       - subnet: 10.5.0.10/16
         gateway: 10.5.10.1
